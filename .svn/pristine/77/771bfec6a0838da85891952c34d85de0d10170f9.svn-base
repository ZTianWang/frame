package com.frame.mapper.base;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.lang.reflect.Field;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.persistence.Column;
import javax.persistence.Table;

public class MapperTemplate {
	/*
	 * 缓存entity的sql语句，提高效率，避免每次解析生成
	 */
	private static ConcurrentHashMap<String,String> sqlMap=new ConcurrentHashMap<String, String>();

	public <T> String insert(T entity){
		String key=entity.getClass()+"insertSql";
		if(!sqlMap.containsKey(key)){
			Class<?> clz=entity.getClass();
			BEGIN();
		 
			INSERT_INTO(tablename(clz)); 
			String [] column=caculationColumnList(clz);
	        VALUES(column[0],column[1]);  
			
			sqlMap.put(key, SQL());
		}
		System.out.println(key+":"+sqlMap.get(key));
		return sqlMap.get(key);
	}
	
	public String delete(Map<String, Object> parameter) {
		String key=parameter.get("clz")+"deleteSql";
		if(!sqlMap.containsKey(key)){
			String idname = id();
			BEGIN();
			DELETE_FROM(tablename((Class<?>)parameter.get("clz")));
			WHERE(idname + "=#{" + idname + "}");
			sqlMap.put(key, SQL());
		}
		return sqlMap.get(key);
 	}

	/**
	 * 通过自定义注解，得到类对应的表name
	 * 
	 * @return 类对应的数据库表名
	 */
	private String tablename(Class<?> clz) {

		Table table = clz.getAnnotation(Table.class);
		if (table != null)
			return table.name();
		else
			throw new RuntimeException(this.getClass().getName() + " need use @Table");
	}

	private String[] caculationColumnList(Class<?> clz){
		 Field[] superFields = clz.getSuperclass().getDeclaredFields();  
	 	 Field[] entityFields = clz.getDeclaredFields();  
	 	 Field[] fields=new Field[superFields.length+entityFields.length];
	 	 System.arraycopy(superFields, 0, fields, 0, superFields.length);
		 System.arraycopy(entityFields, 0, fields, superFields.length, entityFields.length);
	        StringBuilder column = new StringBuilder();  
	        StringBuilder field=  new StringBuilder(); 
	        int i=0;
	        for(Field temp:fields){
              if(temp.isAnnotationPresent(Column.class)) {
	        	if(i++!=0){
	        		column.append(','); 
	        		field.append(",");
	        	}
	        	column.append(temp.getName()); 
	        	field.append("#{").append(temp.getName()).append('}');  
 	        	}
	        }
	        
          return new String[]{camelToUnderline(column.toString()),field.toString()};
	}
	
	/**
	 * 暂时直接返回id，即数据库表中的主键
	 * 
	 * @return
	 */
	private String id() {
		// for(Field field : this.getClass().getFields()) {
		// if(field.isAnnotationPresent(Id.class))
		// return field.getName();
		// }
		return "id";
		// throw new RuntimeException("undefine POJO @Id");

	}

	  public   String camelToUnderline(String param){  
	       int len=param.length();  
	       StringBuilder sb=new StringBuilder(len);  
	       for (int i = 0; i < len; i++) {  
	           char c=param.charAt(i);  
	           if (Character.isUpperCase(c)){  
	               sb.append("_");  
	               sb.append(Character.toLowerCase(c));  
	           }else{  
	               sb.append(c);  
	           }  
	       }  
	       return sb.toString();  
	   }  
}
