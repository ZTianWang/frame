package com.frame.utils.mybatis;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.persistence.Column;
import javax.persistence.Table;

import com.frame.utils.exception.FrameException;

public class MyBatisHelper {
	/**
	 * 缓存类的Field数组
	 */
	private static ConcurrentHashMap<String,Field[]> fieldsMap=new ConcurrentHashMap<String, Field[]>();
	/*
	 * 缓存entity的sql语句，提高效率，避免每次解析生成
	 */
	public static ConcurrentHashMap<String,String> sqlMap=new ConcurrentHashMap<String, String>();
	
	/**
	 * 得到类以及父类的@Column注解字段,先这样处理
	 * @param clz
	 * @return
	 */
	public static  Field[] getFields(Class<?> clz){
		String clzName=clz.getName();
		 if(!fieldsMap.containsKey(clzName)){
			 List<Field> list=new ArrayList<Field>();
			 Field[] entityFields = clz.getDeclaredFields();  
			 Field[] superFields = clz.getSuperclass().getDeclaredFields();  
			 for(Field field:superFields){
				 if(field.isAnnotationPresent(Column.class)){
					 list.add(field);
				 }
			 }
			 for(Field field:entityFields){
				 if(field.isAnnotationPresent(Column.class)){
					 list.add(field);
				 }
			 }
			 fieldsMap.put(clzName, list.toArray(new Field[list.size()]));
		 }
		 return fieldsMap.get(clzName);
	}
	

  
	  /**
	   * 手动绑定数据库字段值到实体
	   * @param entity 实体
	   * @param map 数据库查询结果
	   */
		public static void copyProp(Object entity, Map<String, Object> map) throws FrameException {
			Field[] fields = MyBatisHelper.getFields(entity.getClass());

			try {
				for (Field field : fields) {
					field.setAccessible(true);
					field.set(entity, map.get(getColumnName(field)));
				}

			} catch (IllegalArgumentException | IllegalAccessException e) {
		 
          	throw new FrameException(entity.getClass().getName() + " copyProp exception");
			}
		}

		public static String getTableName(Class<?> clz){
			String key=clz+"tableName";
             if(!sqlMap.containsKey(key)){
            	 Table table = clz.getAnnotation(Table.class);
            	 if (table != null)
            		 return table.name();
            	 else
            		 throw new RuntimeException(clz.getName() + " need use @Table");
             }
             return sqlMap.get(key);
		}
		
		public  static String selectColumnList(Class<?> clz) {  
	    	Field  [] fields=MyBatisHelper.getFields(clz);
	        StringBuilder sb = new StringBuilder();  
	        
	        int i=0;
	        for(Field temp:fields){
	        	  String fieldName=getColumnName(temp);
	        	     if(i++ != 0)  
	                     sb.append(',');  
	                 sb.append(fieldName); 
	        }
	        
	     
	        return sb.toString();  
	    }  
		
		public static String getColumnName(Field field){
			Column column=field.getAnnotation(Column.class);
			return column.name().equals("")?field.getName(): column.name();
		}
}
