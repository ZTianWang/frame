package com.frame.mapper.base;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.lang.reflect.Field;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Id;

import org.crazycake.utils.CamelNameUtils;

import com.frame.utils.mybatis.MyBatisHelper;

public class MapperTemplate<T> {
 
	public   String insert(T entity){
		String key=entity.getClass()+"insertSql";
		if(!MyBatisHelper.sqlMap.containsKey(key)){
			Class<?> clz=entity.getClass();
			BEGIN();
		 
			INSERT_INTO(MyBatisHelper.getTableName(clz)); 
			String [] column=insertColumnList(clz);
	        VALUES(column[0],column[1]);  
			
	        MyBatisHelper.sqlMap.put(key, SQL());
		}
		return MyBatisHelper.sqlMap.get(key);
	}
	
	public  String update(T entity){
		String key=entity.getClass()+"updateSql";
		if(!MyBatisHelper.sqlMap.containsKey(key)){
			Class<?> clz=entity.getClass();
			 BEGIN();  
	          
			 UPDATE(MyBatisHelper.getTableName(clz));  
 		     SET(updateColumnList(clz));  
     	     WHERE(id()+ "=#{" + id() + "}");  
			
     	    MyBatisHelper.sqlMap.put(key, SQL());
		}
		return MyBatisHelper.sqlMap.get(key);
	}
	
	public String updateColumns(Map<String, Object> parameter) {
		      StringBuilder sql=new StringBuilder("update ").append(MyBatisHelper.getTableName((Class<?>)parameter.get("clz"))).append(" set ");
		      String [] columns=(String[]) parameter.get("columns");
		      int i=0;
		      for(String column:columns){
		    	  if(i++!=0)sql.append(",");
		    	  sql.append(" ").append(CamelNameUtils.camel2underscore(column)).append("=").append("#{entity.").append(column).append("}");
		    	  
		      }
		      
		      sql.append(" where id=#{entity.id}");
		      System.err.println(sql.toString());
		return sql.toString();
	}
	 
	public String delete(Map<String, Object> parameter) {
		String key=parameter.get("clz")+"deleteSql";
		if(!MyBatisHelper.sqlMap.containsKey(key)){
			String idname = id();
			BEGIN();
			DELETE_FROM(MyBatisHelper.getTableName((Class<?>)parameter.get("clz")));
			WHERE(idname + "=#{" + idname + "}");
			MyBatisHelper.sqlMap.put(key, SQL());
		}
		return MyBatisHelper.sqlMap.get(key);
 	}
	
	public String deleteByIds(Map<String, Object> parameter){
		StringBuilder sql=new StringBuilder("delete from ");
		sql.append(MyBatisHelper.getTableName((Class<?>)parameter.get("clz")));
		sql.append(" where id in (");
		String[] ids=(String[])parameter.get("ids");
		int i=0;
		for(String id:ids){
			if(i++!=0)
				sql.append(",");
			sql.append("'").append(id).append("'");
			
		}
		sql.append(")");
		System.out.println("+++++"+sql.toString());
	    return sql.toString();
	}
	
	public String load(Map<String, Object> parameter) {
		String key=parameter.get("clz")+"loadSql";
		if(!MyBatisHelper.sqlMap.containsKey(key)){
			 Class<?> clz=(Class<?>)parameter.get("clz");
			String idname = id();
			BEGIN();
			SELECT(MyBatisHelper.selectColumnList(clz));
			FROM(MyBatisHelper.getTableName(clz));
			WHERE(idname + "=#{" + idname + "}");
			MyBatisHelper.sqlMap.put(key, SQL());
		}
		return MyBatisHelper.sqlMap.get(key);
 	}

	private String[] insertColumnList(Class<?> clz){
		Field  [] fields=MyBatisHelper.getFields(clz);
	        StringBuilder columnSql = new StringBuilder();  
	        StringBuilder fieldSql=  new StringBuilder(); 
	        int i=0;
	        for(Field field:fields){
	        	String fieldName=field.getName();
	        	if(i++!=0){
	        		columnSql.append(','); 
	        		fieldSql.append(",");
	        	}
	         
	        	columnSql.append(CamelNameUtils.camel2underscore(fieldName)); 
	        	fieldSql.append("#{").append(fieldName).append('}');  
	        }
	        
          return new String[]{columnSql.toString(),fieldSql.toString()};
	}
	
	
    public String updateColumnList(Class<?> clz) {  
    	Field  [] fields=MyBatisHelper.getFields(clz);
        StringBuilder sb = new StringBuilder();  
        
        int i=0;
        for(Field field:fields){
          if(!field.isAnnotationPresent(Id.class)&&field.getAnnotation(Column.class).updatable()) {
        	  String fieldName=field.getName();
        	     if(i++ != 0)  
                     sb.append(',');  
                 sb.append(CamelNameUtils.camel2underscore(fieldName)).append("=#{").append(fieldName).append('}'); 
	        	}
        }
        
     
        return sb.toString();  
    }  
	

	
	/**
	 * 暂时直接返回id，即数据库表中的主键
	 * 
	 * @return
	 */
	private String id() {
		// for(Field field : this.getClass().getFields()) {
		// if(field.isAnnotationPresent(Id.class))
		// return field.getName();
		// }
		return "id";
		// throw new RuntimeException("undefine POJO @Id");

	}

}
