package com.frame.service;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import com.frame.command.AuthorizationCommand;
import com.frame.dto.AuthorizationDto;
import com.frame.entity.Account;
import com.frame.utils.HttpCode;
import com.frame.utils.KVMap;
import com.frame.utils.exception.FrameException;

@Service
public class AuthorizationService {

	@Autowired
	private AccountService accountService;
	
	@Autowired
	protected RedisTemplate<String, Object> redisTemplate;

	/**
	 * 根据条件，判断是否存在用户
	 * 
	 * @param authorizationCommand
	 */
	public AuthorizationDto login(AuthorizationCommand cmd) {
		KVMap<String, Object> parameter = new KVMap<String, Object>();
		AuthorizationDto authorizationDto=new AuthorizationDto();
		if (cmd.getType() == 0) {// 校验用户名和密码，注意此处密码是客户端已经两次md5加密
			parameter.add("account", cmd.getAccount()).add("password",
					cmd.getPassword());
			List<Account> accountList = accountService.findList("account=#{account} and password=#{password}", parameter,
					new String[] { "account" });
			if(accountList==null){
			      throw new FrameException("用户名或密码错误", HttpCode.NOT_FOUND); 
			}
			Account account=accountList.get(0);
		       authorizationDto.setAccount(account.getAccount());
		       authorizationDto.setAccountId(account.getId());
		      
		}else{
			   throw new FrameException("无效参数", HttpCode.INVALID_PARAMETER); 
		}
		 String token=UUID.randomUUID().toString().replace("-", "");
		 authorizationDto.setAuthorization(token);
		 redisTemplate.opsForValue().set(token, authorizationDto,60,TimeUnit.MINUTES);
		  authorizationDto.setAccountId(null);//缓存之后，不输出给调用者
		return authorizationDto;
	}
}
